plot(SmallPop$freqA, type="l", ylim=c(0,1), lwd=2, las=1, ylab="Freq A with Selection")
lines(1:nrow(SmallPop), SmallPop$freqa, col="purple")
plot(SmallPop_w$freqA, type="l", ylim=c(0,1), lwd=2, las=1, ylab="Freq A with Selection")
lines(1:nrow(SmallPop_w), SmallPop_w$freqa, col="orange")
}
View(simPop_w)
View(simPop_w)
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 0)){
freqA <- c()
freqa <- c()
Genotypes <- matrix(0, nrow=nGenerations, ncol=3)
colnames(Genotypes) <- c("AA", "Aa", "aa")
names(w) <- colnames(Genotypes)
checkFitness <- function(Geno, w){
Genot <- paste(Geno[1], Geno[2], sep="")
Fit <- w[Genot]
return(Fit)
}
All_Children <- makePop(Popsize)
for(generation in 1:nGenerations){
Fitnesses <- apply(All_Children, 0.5, checkFitness, w=w)
Women <- sample(1:Popsize, size=(Popsize/2))
Mothers <- All_Children[Women,]
Men <- setdiff(1:Popsize, Women)
Fathers <- All_Children[Men,]
nChildren <- Popsize
for(child in 1:nChildren){
father <-  c("Fathers", size=1, prob=Fitnesses[Men])
mother <- c("Mothers", size=1, prob=Fitnesses[Women])
Child <- sort(mating(Mothers, Fathers), decreasing=T)
cGenotype <- paste(Child[1], Child[2], sep="")
Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype]+1
All_Children[child,] <- Child
}
nA_children <- length(which(All_Children == "A"))
freqA[generation] <- nA_children / length(All_Children)
na_children <- length(which(All_Children == "a"))
freqa[generation] <- na_children / length(All_Children)
}
output <- data.frame(freqA=freqA, freqa=freqa, Genotypes=Genotypes)
return(output)
}
par(mfrow=c(5,2), mar=c(4, 4, 1, 1), las=1)
for(count in 1:5){
SmallPop <- simPop(10)
SmallPop_w <- simPop_w(10)
plot(SmallPop$freqA, type="l", ylim=c(0,1), lwd=2, las=1, ylab="Freq A with Selection")
lines(1:nrow(SmallPop), SmallPop$freqa, col="purple")
plot(SmallPop_w$freqA, type="l", ylim=c(0,1), lwd=2, las=1, ylab="Freq A with Selection")
lines(1:nrow(SmallPop_w), SmallPop_w$freqa, col="orange")
}
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, 1, 0)){
freqA <- c()
freqa <- c()
Genotypes <- matrix(0, nrow=nGenerations, ncol=3)
colnames(Genotypes) <- c("AA", "Aa", "aa")
names(w) <- colnames(Genotypes)
checkFitness <- function(Geno, w){
Genot <- paste(Geno[1], Geno[2], sep="")
Fit <- w[Genot]
return(Fit)
}
All_Children <- makePop(Popsize)
for(generation in 1:nGenerations){
Fitnesses <- apply(All_Children, 0.5, checkFitness, w=w)
Women <- sample(1:Popsize, size=(Popsize/2))
Mothers <- All_Children[Women,]
Men <- setdiff(1:Popsize, Women)
Fathers <- All_Children[Men,]
nChildren <- Popsize
for(child in 1:nChildren){
father <-  c("Fathers", size=1, prob=Fitnesses[Men])
mother <- c("Mothers", size=1, prob=Fitnesses[Women])
Child <- sort(mating(Mothers, Fathers), decreasing=T)
cGenotype <- paste(Child[1], Child[2], sep="")
Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype]+1
All_Children[child,] <- Child
}
nA_children <- length(which(All_Children == "A"))
freqA[generation] <- nA_children / length(All_Children)
na_children <- length(which(All_Children == "a"))
freqa[generation] <- na_children / length(All_Children)
}
output <- data.frame(freqA=freqA, freqa=freqa, Genotypes=Genotypes)
return(output)
}
par(mfrow=c(5,2), mar=c(4, 4, 1, 1), las=1)
for(count in 1:5){
SmallPop <- simPop(10)
SmallPop_w <- simPop_w(10)
plot(SmallPop$freqA, type="l", ylim=c(0,1), lwd=2, las=1, ylab="Freq A with Selection")
lines(1:nrow(SmallPop), SmallPop$freqa, col="purple")
plot(SmallPop_w$freqA, type="l", ylim=c(0,1), lwd=2, las=1, ylab="Freq A with Selection")
lines(1:nrow(SmallPop_w), SmallPop_w$freqa, col="orange")
}
simPop_w <- function(Popsize=100, nGenerations=100, w=c(1, .5, 0)){
freqA <- c()
freqa <- c()
Genotypes <- matrix(0, nrow=nGenerations, ncol=3)
colnames(Genotypes) <- c("AA", "Aa", "aa")
names(w) <- colnames(Genotypes)
checkFitness <- function(Geno, w){
Genot <- paste(Geno[1], Geno[2], sep="")
Fit <- w[Genot]
return(Fit)
}
All_Children <- makePop(Popsize)
for(generation in 1:nGenerations){
Fitnesses <- apply(All_Children, 1, checkFitness, w=w)
Women <- sample(1:Popsize, size=(Popsize/2))
Mothers <- All_Children[Women,]
Men <- setdiff(1:Popsize, Women)
Fathers <- All_Children[Men,]
nChildren <- Popsize
for(child in 1:nChildren){
father <-  c("Fathers", size=1, prob=Fitnesses[Men])
mother <- c("Mothers", size=1, prob=Fitnesses[Women])
Child <- sort(mating(Mothers, Fathers), decreasing=T)
cGenotype <- paste(Child[1], Child[2], sep="")
Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype]+1
All_Children[child,] <- Child
}
nA_children <- length(which(All_Children == "A"))
freqA[generation] <- nA_children / length(All_Children)
na_children <- length(which(All_Children == "a"))
freqa[generation] <- na_children / length(All_Children)
}
output <- data.frame(freqA=freqA, freqa=freqa, Genotypes=Genotypes)
return(output)
}
par(mfrow=c(5,2), mar=c(4, 4, 1, 1), las=1)
for(count in 1:5){
SmallPop <- simPop(10)
SmallPop_w <- simPop_w(10)
plot(SmallPop$freqA, type="l", ylim=c(0,1), lwd=2, las=1, ylab="Freq A with Selection")
lines(1:nrow(SmallPop), SmallPop$freqa, col="purple")
plot(SmallPop_w$freqA, type="l", ylim=c(0,1), lwd=2, las=1, ylab="Freq A with Selection")
lines(1:nrow(SmallPop_w), SmallPop_w$freqa, col="orange")
}
simPop_w <- function(Popsize=100, nGenerations=100, w=c(.5, 1, .5)){
freqA <- c()
freqa <- c()
Genotypes <- matrix(0, nrow=nGenerations, ncol=3)
colnames(Genotypes) <- c("AA", "Aa", "aa")
names(w) <- colnames(Genotypes)
checkFitness <- function(Geno, w){
Genot <- paste(Geno[1], Geno[2], sep="")
Fit <- w[Genot]
return(Fit)
}
All_Children <- makePop(Popsize)
for(generation in 1:nGenerations){
Fitnesses <- apply(All_Children, 1, checkFitness, w=w)
Women <- sample(1:Popsize, size=(Popsize/2))
Mothers <- All_Children[Women,]
Men <- setdiff(1:Popsize, Women)
Fathers <- All_Children[Men,]
nChildren <- Popsize
for(child in 1:nChildren){
father <-  c("Fathers", size=1, prob=Fitnesses[Men])
mother <- c("Mothers", size=1, prob=Fitnesses[Women])
Child <- sort(mating(Mothers, Fathers), decreasing=T)
cGenotype <- paste(Child[1], Child[2], sep="")
Genotypes[generation, cGenotype] <- Genotypes[generation, cGenotype]+1
All_Children[child,] <- Child
}
nA_children <- length(which(All_Children == "A"))
freqA[generation] <- nA_children / length(All_Children)
na_children <- length(which(All_Children == "a"))
freqa[generation] <- na_children / length(All_Children)
}
output <- data.frame(freqA=freqA, freqa=freqa, Genotypes=Genotypes)
return(output)
}
par(mfrow=c(5,2), mar=c(4, 4, 1, 1), las=1)
for(count in 1:5){
SmallPop <- simPop(10)
SmallPop_w <- simPop_w(10)
plot(SmallPop$freqA, type="l", ylim=c(0,1), lwd=2, las=1, ylab="Freq A with Selection")
lines(1:nrow(SmallPop), SmallPop$freqa, col="purple")
plot(SmallPop_w$freqA, type="l", ylim=c(0,1), lwd=2, las=1, ylab="Freq A with Selection")
lines(1:nrow(SmallPop_w), SmallPop_w$freqa, col="orange")
}
learnPopGen?
()
learnPopGen
install.packages("learnPopGen")
learnPopGen?
/
?learnPopGen
??learnPopGen
coalescent.plot(n=10, ngen=20, col=blue)
coalescent.plot(n=10, ngen=20, col=blue)
learnPopGen(coalescent.plot(n=10, ngen=20, col=blue))
coalescent.plot()
coalescent.plot(n=10, ngen=20, colors=NULL, ...)
coalescent.plot {learnPopGen}
coalescent.plot()
## Not run:
coalescent.plot(n=20,ngen=30,col.order="alternating")
## End(Not run)
install.packages("learnPopGen")
library(learnPopGen)
help(learnPopGen)
??learnPopGen
install.packages("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
bye()
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir<-dir()
old.dir<-getwd()
dir.create(testdir)
dir.create()
dir.create(getwd(testdir))
dir.create(testdir)
getdw(testdir)
getwd(testdir)
testdir
dir.create(test.dir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
?list.files
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path(arg('folder1','folder2'))
file.path(args('folder1','folder2'))
file.path('folder1','folder2')
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2',
| 'testdir3'), recursive = TRUE)
dir.create(file.path('testdir2','testdir3'), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length()
seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
x<-c(44,NA,5,NA)
X*3
3*X
c(44,NA,5,NA)*3
X * 3
x
x * 3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x(c(3,5,7))
c(x[3,5,7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical("vect","vect2")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-"Bill,Gina,Kelly,Sean"
patients<-"Bill","Gina","Kelly","Sean"
patients<-"Bill, Gina, Kelly,and Sean"
patients<-"Bill, Gina, Kelly, Sean"
patients<-c("Bill, Gina, Kelly, Sean")
patients<-"'Bill', 'Gina', 'Kelly', 'Sean'"
patients<-"Bill", "Gina", "Kelly", "Sean"
patients<-"Bill""Gina""Kelly""Sean"
patients<-"Bill,""Gina,""Kelly,""Sean"
patients<-"Bill,Gina,Kelly, and Sean"
patients<-"Bill,Gina,Kelly,Sean"
info()
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5!==7
5 != 7
5 !== 7
5 != 7
!(5==7)
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x)c(8,4,0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
paste("It","snowed","yesterday.")
telegram("It","snowed","yesterday.")
submit()
submit
submit()
submit()
mad_libs(place="West Virginia",adjustive="exhausted",noun="lighs")
submit
submit()
"I"%p%"love"%p%"R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,color=2)
plot(cars,col=2)
plot(cars,xlim=c(10,15)
)
plot(cars,pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(mpg~cyl,data=mtcars)
hist(mtcars$mpg)
trueMean<-5
trueSD1<-5
population1<-rnorm(1e6,trueMean1,trueSD1)
trueMean2<-4
trueSD2<-5
population2<-rnorm(1e6,trueMean2,trueSD2)
Size<-50
Sample1<-sample(population1,Size)
Sample2<-sample(population2,Size)trueMean1<-5
trueSD1<-5
population1<-rnorm(1e6,trueMean1,trueSD1)
trueMean2<-4
trueSD2<-5
population2<-rnorm(1e6,trueMean2,trueSD2)
Size<-50
Sample1<-sample(population1,Size)
q()
setwd("C:\\Users\\HDK\\Desktop\\Evolution\\Tasks\\Task_06")
install.packages("learnPopGen")
library(learnPopGen)
?learnPopGen
install.packages("coala")
library(coala)
?coala
install.packages("phytools")
library(phytools)
?phytools
model<-coal_model(sample_size=5,loci_number=10,loci_length=500,ploidy=2)+
feat_mutation(10)+
feat_recombination(10)+
sumstat_trees()+
sumstat_nucleotide_div()
stats<-simulate(model,nsim=1)
Diversity<-stats$pi
Diversity
install.packages("phytools")
Nloci<-length(stats$trees)
t1<-read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
setwd("C:\\Users\\HDK\\Desktop\\Evolution\\Tasks\\Task_06")
install.packages("learnPopGen")
library(learnPopGen)
?learnPopGen
install.packages("coala")
library(coala)
?coala
install.packages("phytools")
library(phytools)
?phytools
model<-coal_model(sample_size=5,loci_number=10,loci_length=500,ploidy=2)+
feat_mutation(10)+
feat_recombination(10)+
sumstat_trees()+
sumstat_nucleotide_div()
stats<-simulate(model,nsim=1)
Diversity<-stats$pi
Diversity
install.packages("coala")
install.packages("phytools")
